
// Probes
#include <DallasTemperature.h>
#include <TroykaIMU.h>
#include <TroykaMQ.h>
#include <TroykaThermometer.h>
#include <iarduino_SensorPulse.h>

// Wireless
#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>


#define PIN_MQ9_1 A0
#define PIN_MQ9_2 A1
#define PIN_MQ9_HEATER_1 4
#define PIN_MQ9_HEATER_2 11
#define PULSE_SENSOR A3
#define THERM_PIN A2
#define RELAY_PIN 7

Compass compass;
MQ9 mq9_1(PIN_MQ9_1,PIN_MQ9_1);
MQ9 mq9_2(PIN_MQ9_2,PIN_MQ9_2);
iarduino_SensorPulse Pulse(PULSE_SENSOR);
TroykaThermometer therm(THERM_PIN);


RF24 radio(49, 50); // CE, CSN
char data[11];


int     LPG1;
int     Methane1;
int     CarbonMonoxide1;
int     pulse;   
int     tempIn;
int     tempOut;  
  
 
int     LPG2;
int     Methane2;
int     CarbonMonoxide2;
     

void setup() {
  // put your setup code here, to run once:
  //Serial.begin(9600);
  mq9_1.cycleHeat();
  mq9_2.cycleHeat();
  Pulse.begin();
  compass.begin();

  radio.begin();
  radio.setChannel(110); // 2.510 GHz
  radio.setDataRate(RF24_2MBPS); // 2Mbps
  radio.setPALevel(2); // ~max distance
  radio.openWritingPipe(0x18151351820919LL); //tube


pinMode(RELAY_PIN, OUTPUT);
}




void loop() {
  check1MQ9();
  check2MQ9();

  pulse = checkPulse();
  
  tempIn = checkTemperature();

  sendFunc();

}

void check1MQ9(){
  if (!mq9_1.isCalibrated()&&mq9_1.atHeatCycleEnd()) {
    mq9_1.calibrate();
    mq9_1.cycleHeat();
  }

  if (mq9_1.isCalibrated()&&mq9_1.atHeatCycleEnd()) {
     LPG1=mq9_1.readLPG();
     Methane1=mq9_1.readMethane();
     CarbonMonoxide1=mq9_1.readCarbonMonoxide();
     mq9_1.cycleHeat();
  }
}

void check2MQ9(){
  if (!mq9_2.isCalibrated()&&mq9_2.atHeatCycleEnd()) {
    mq9_2.calibrate();
    mq9_2.cycleHeat();
  }

  if (mq9_2.isCalibrated()&&mq9_2.atHeatCycleEnd()) {
     LPG2=mq9_2.readLPG();
     Methane2=mq9_2.readMethane();
     CarbonMonoxide2=mq9_2.readCarbonMonoxide();
     mq9_2.cycleHeat();
  }
  
}

int checkPulse(){
  if (Pulse.check(ISP_VALID)==ISP_CONNECTED) {
      return Pulse.check(ISP_PULSE);
  }
}

int checkTemperature(){
  therm.read();
  int temp = therm.getTemperatureC();
  if(temp>40){
    digitalWrite(RELAY_PIN, HIGH);
  } else{
    digitalWrite(RELAY_PIN, LOW);
  }

  return temp;
}

void sendFunc(){
/*Serial.println(LPG1);
  Serial.println(Methane1);
  Serial.println(CarbonMonoxide1);
  Serial.print("Pulse is - ");
  Serial.println(pulse);
  Serial.print("Temperature is ");
  Serial.println(tempIn);
  
  Serial.print(compass.readMagneticGaussX());
    Serial.print("\t\t");
    // Выводим напряженность магнитного поля в Гауссах по оси Y
    Serial.print(compass.readMagneticGaussY());
    Serial.print("\t\t");
    // Выводим напряженность магнитного поля в Гауссах по оси Z
    Serial.print(compass.readMagneticGaussZ());
    Serial.println();
  delay(1000);
*/
//if(pulse/100 >1){
  String Puls = ("puls_"+String(pulse));
    data[0] = Puls.c_str();

  String lpg1 = ("lpg1_"+String(LPG1));
    data[1] = lpg1.c_str();

  String lpg2 = ("lpg2_"+String(LPG2));
    data[2] = lpg2.c_str();

  String met1 = ("met1_"+String(Methane1));
    data[3] = met1.c_str();

  String met2 = ("met2_"+String(Methane2));
    data[4] = met2.c_str();

  String co1 = ("co-1_"+String(CarbonMonoxide1));
    data[5] = co1.c_str();

  String co2 = ("co-2_"+String(CarbonMonoxide2));
    data[6] = co2.c_str();

  String temp = ("temp_"+String(tempIn));
    data[7] = temp.c_str();



  String mx = ("MX_"+String(compass.readMagneticGaussX()));
    data[8] = mx.c_str();

  String my = ("MY_"+String(compass.readMagneticGaussY()));
    data[9] = my.c_str();

  String mz = ("MZ_"+String(compass.readMagneticGaussZ()));
    data[10] = mz.c_str();

  delay(100);

  radio.write(&data, sizeof(data));


}
